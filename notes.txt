PROJECT: 

To Create a virtual environment
 WARNING: Ensure you're using the 'cmd' integrated terminal  
$ python -m venv <Path/to/venv> // Creates a 'venv' folder
$ .\venv\Scripts\activate.bat // activate the virtual environment

You should see 
(venv) C:\Link\where\you\are

NOTE: All pip, and python manage.py commands should be done inside the venv environment
$ pip freeze - check installations (should be empty because you're in the virtual env)

$ pip install django
$ django-admin startproject btre

create pages app
$ django-admin startapp pages

add app to project FILE: settings.py

to add static files, in project create a FOLDER: static 
add and edit STATIC_URL properties in FILE: settings.py 
copy static files and folders (css, javascript, images etc) into FOLDER: static and run 

$ python manage.py collectstatic // to collect static files and add to project

to include static files on a page use
{% load static %} at the top of the page

Implementing the UI part 1 
Create FOLDER: templates folder and create HTML FILE:s that represent Views
Copy Base template into FILE: base.html and extend base to other 
views. 
Create partials FILE:S for other repetitive section of the UI 
NOTE: Partials by convention are named with underscore first e.g. _navbar.html 

install PostgresQL

PS C:\Program Files\PostgreSQL\10\data> pg_ctl -D . stop
https://stackoverflow.com/questions/47311101/forgot-admin-password-on-postgres-windows-installation-cant-reset
ALTER USER Postgres WITH PASSWORD '<newpassword>';
pg_ctl -D C:\PostgreSQL\data start
 
in the start menu, postgres is found by searching for psql

Configure Django to use postgres
Install pip postgres package inside venv

$ pip install psycopg2
$ pip install psycopg2-binary 

Setup database parameters in FILE: settings.py 
ie 

DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': 'btredb', // DATABASE NAME
    'USER': 'postgres', // DATABASE USERNAME
    'PASSWORD': 'postgres', // USER PASSWORD
    'HOST': 'localhost', // DATABASE HOST
    ''
  }
}

check database connection by running
$ python manage.py makemigrations

Create Model classes in FOLDER: <app name> FILE: models.py

Check SQL commands
$ python manage.py sqlmigrate <appname> 0001 (or file number)

Run model creation 
$ python manage.py migrate

for images remember to install Pillow
$ pip install Pillow

Create Superuser for Admin area
$ python manage.py createsuperuser

Managing Site Media
add the created models to the back end by editing the 
FOLDER: <appname> FILE: admin.py // Register the models in the admin.py files

To enable media storage
edit the FOLDER: <projectName> FILE: urls.py file

Customize the Admin Backend 


